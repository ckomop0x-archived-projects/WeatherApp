{"version":3,"sources":["components/Footer/index.jsx","helpers/places.js","components/CityCard/index.jsx","components/Loader/Loader.jsx","components/WeatherDisplay.jsx","services/url-maker.js","components/Home.jsx","components/App/App.tsx","components/Header/Header.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["Footer","_ref","footerTitle","react_default","a","createElement","className","PLACES","name","withStyles","card","maxWidth","marginTop","media","height","props","classes","_props$weatherData","weatherData","main","wind","console","log","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","component","temp","temp_max","temp_min","speed","theme","progress","margin","spacing","unit","CircularProgress","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","loadWeather","url","_this2","fetch","concat","then","res","json","setState","newProps","components_CityCard","Loader","Component","Home","data-cy","components_WeatherDisplay","ButtonStyled","styled","Button","background","border","borderRadius","boxShadow","color","padding","NavLinkStyled","NavLink","textDecoration","App","_useTranslation","useTranslation","t","i18n","Fragment","CssBaseline","react_router_dom","components_Header_Header","title","changeLanguage","lng","map","place","index","key","to","react_router","exact","path","render","components_Home","match","params","components_Footer","version","Header","AppBar","position","Toolbar","style","display","justifyContent","onClick","Boolean","window","location","hostname","use","LanguageDetector","initReactI18next","init","resources","en","nl","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7b48ca7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = ({footerTitle}) => {\n    return (\n        <footer className=\"footer\">\n            <div className=\"container\">\n              {footerTitle}\n            </div>\n        </footer>\n    )\n};\n\nFooter.propTypes = {\n  footerTitle: PropTypes.string.isRequired\n}\n\nexport default Footer;\n","export const PLACES = [\n    {name: 'Amsterdam'},\n    {name: 'Rotterdam'},\n    {name: 'Moscow'},\n    {name: 'Kiev'},\n    {name: 'Uzhhorod'},\n    {name: 'Prague'},\n    {name: 'Santa Cruz'},\n    {name: 'Honolulu'}\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n    marginTop: 20\n  },\n  media: {\n    height: 140,\n  },\n};\n\nfunction CityCard(props) {\n  const { classes, weatherData: { name, main, wind } } = props;\n  console.log(props.weatherData)\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Typography component=\"ul\" className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">Current: {main.temp}°</li>\n              <li className=\"list-group-item\">High: {main.temp_max}°</li>\n              <li className=\"list-group-item\">Low: {main.temp_min}°</li>\n              <li className=\"list-group-item\">Wind Speed: {wind.speed} mi/hr</li>\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nCityCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CityCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = (theme) => ({\n  progress: {\n    margin: theme.spacing.unit * 2,\n  },\n});\n\nfunction CircularIndeterminate(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <CircularProgress className={classes.progress} />\n    </div>\n  );\n}\n\nCircularIndeterminate.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);\n","import React, {Component} from 'react';\nimport {urlMaker} from '../services/url-maker';\nimport CityCard from './CityCard'\nimport CircularIndeterminate from '../components/Loader/Loader'\n\nclass WeatherDisplay extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            weatherData: null,\n            city: this.props.city || 'amsterdam'\n        };\n    }\n\n    componentDidMount () {\n        this.loadWeather(this.props.city);\n    }\n\n    loadWeather (city) {\n        fetch(urlMaker(city))\n            .then(res => res.json())\n            .then(json => {\n                this.setState({weatherData: json});\n            });\n    }\n\n    componentWillReceiveProps (newProps) {\n        if (newProps.city !== this.state.city) {\n            this.setState({city: newProps.city})\n            this.loadWeather(newProps.city);\n        }\n    }\n\n    render () {\n        const {weatherData} = this.state;\n\n        if (!weatherData) {\n            return (\n                <CircularIndeterminate />\n            );\n        } else {\n            return (\n                <div>\n                    <CityCard weatherData={weatherData}/>\n                </div>\n            );\n        }\n    }\n}\n\nexport default WeatherDisplay;\n","export function urlMaker (url) {\n    return `https://api.openweathermap.org/data/2.5/weather?q=${ url }&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=metric`;\n}","import React from 'react';\nimport WeatherDisplay from './WeatherDisplay';\n\nconst Home = ({city}) => {\n    return (\n        <div data-cy=\"homeComponent\">\n          <WeatherDisplay city={city}/>\n        </div>\n    )\n};\n\nexport default Home;\n","import React, { FunctionComponent } from 'react'\nimport { HashRouter as Router, Route, NavLink, Switch } from 'react-router-dom'\nimport { Header } from '../../components'\nimport Footer from '../Footer'\nimport { PLACES } from '../../helpers/places'\nimport Home from '../Home'\nimport { styled } from '@material-ui/styles'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation } from 'react-i18next'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { version } from '../../../package.json'\nimport './app.css'\n\nconst ButtonStyled = styled(Button)({\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n  border: 0,\n  borderRadius: 3,\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  color: 'white',\n  height: 24,\n  padding: '0 10px',\n})\n\nconst NavLinkStyled = styled(NavLink)({\n  textDecoration: 'none',\n})\n\nconst App: FunctionComponent = () => {\n  const { t, i18n } = useTranslation()\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng)\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Router>\n        <div className=\"mainContainer\">\n          <Header title={t('page.title')} changeLanguage={changeLanguage} />\n          <div className=\"container content\">\n            <h3>{t('Select a city')}</h3>\n            <div>\n              {PLACES.map((place, index) => (\n                <NavLinkStyled key={index} to={`${place.name}`}>\n                  <ButtonStyled key={index}>\n                    {/*<button type=\"button\" className=\"btn btn-light\" key={index}>*/}\n                    {place.name}\n                    {/*</button>*/}\n                  </ButtonStyled>\n                </NavLinkStyled>\n              ))}\n            </div>\n            <Switch>\n              <Route exact path=\"/\" render={() => <Home city=\"amsterdam\" />} />\n              <Route path=\"/:city\" render={({ match }) => <Home city={match.params.city} />} />\n            </Switch>\n          </div>\n          <Footer footerTitle={`&copy; 2017-2019 Weather app by Pavel \"Ckomop0x\" Klochkov. v${version}`} />\n        </div>\n      </Router>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import React, { FunctionComponent } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\ninterface HeaderProps {\n  title: string\n\n  changeLanguage(arg0: string): void\n}\n\nconst Header: FunctionComponent<HeaderProps> = ({ title, changeLanguage }) => (\n  <AppBar position=\"fixed\">\n    <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <Typography variant=\"h5\" color=\"inherit\">\n        {title}\n      </Typography>\n      <div>\n        <button onClick={() => changeLanguage('nl')}>nl</button>\n        <button onClick={() => changeLanguage('en')}>en</button>\n      </div>\n    </Toolbar>\n  </AppBar>\n)\n\nexport default Header\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import i18n from 'i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport { en, nl } from './i18/translations'\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    // we init with resources\n    resources: {\n      en,\n      nl,\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    keySeparator: false, // we use content as keys\n\n    interpolation: {\n      escapeValue: false,\n    },\n  })\n\nexport default i18n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './components'\nimport * as serviceWorker from './serviceWorker'\nimport './i18n'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}